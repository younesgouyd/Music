CREATE TABLE folder (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    parent_folder_id INTEGER REFERENCES folder(id) ON UPDATE CASCADE ON DELETE CASCADE,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL
);

CREATE TABLE album (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    image BLOB,
    release_date TEXT,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL
);

CREATE TABLE media_file (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    source_type TEXT NOT NULL, -- on of: Local, Internet
    domain_name TEXT,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL,
    CHECK (
        (source_type = 'Local'   AND domain_name IS NULL)
     OR (source_type = 'Internet' AND domain_name IS NOT NULL AND domain_name != '')
    )
);

CREATE TABLE track (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    folder_id INTEGER NOT NULL REFERENCES folder(id) ON UPDATE CASCADE ON DELETE CASCADE,
    album_id INTEGER REFERENCES album(id) ON UPDATE CASCADE ON DELETE SET NULL,
    audio_media_file_id INTEGER REFERENCES media_file(id) ON UPDATE CASCADE ON DELETE SET NULL,
    video_media_file_id INTEGER REFERENCES media_file(id) ON UPDATE CASCADE ON DELETE SET NULL,
    lyrics TEXT,
    album_track_number INTEGER,
    duration INTEGER NOT NULL,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL,
    CHECK (audio_media_file_id IS NOT NULL OR video_media_file_id IS NOT NULL)
);

CREATE TABLE artist (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    image BLOB,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL
);

CREATE TABLE playlist (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    folder_id INTEGER REFERENCES folder(id) ON UPDATE CASCADE ON DELETE CASCADE,
    image BLOB,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL
);

CREATE TABLE artist_track_cross_ref (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    artist_id INTEGER NOT NULL REFERENCES artist(id) ON UPDATE CASCADE ON DELETE CASCADE,
    track_id INTEGER NOT NULL REFERENCES track(id) ON UPDATE CASCADE ON DELETE CASCADE,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL
);

CREATE TABLE playlist_track_cross_ref (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    playlist_id INTEGER NOT NULL REFERENCES playlist(id) ON UPDATE CASCADE ON DELETE CASCADE,
    track_id INTEGER NOT NULL REFERENCES track(id) ON UPDATE CASCADE ON DELETE CASCADE,
    creation_datetime INTEGER NOT NULL,
    update_datetime INTEGER NOT NULL,
    UNIQUE (playlist_id, track_id)
);